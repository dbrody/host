#!/usr/bin/env ruby

$: << File.expand_path(File.join(File.dirname(__FILE__), '..', "lib"))
$: << File.expand_path(File.join(File.dirname(__FILE__), '..', "web"))
require "rubygems"
require 'eventmachine'
require 'timeout'

require 'noam_server/config'

require 'noam_web'
require 'noam_server/noam_logging'
require 'noam_server/udp_broadcaster'
require 'noam_server/noam_server'
require 'noam_server/web_socket_server'
require 'noam_server/asset_deployer'

ARGV.each do |a|
  if a == '--debug'
    CONFIG[:logging][:level] = :debug
  elsif a == '--info'
    CONFIG[:logging][:level] = :info
  end
end

NoamServer::NoamLogging.start_up
server = NoamServer::NoamServer.new(CONFIG[:listen_port])
webserver = NoamServer::WebSocketServer.new(CONFIG[:web_socket_port])
broadcaster = NoamServer::UdpBroadcaster.new(CONFIG[:broadcast_port],
                                             CONFIG[:listen_port])
deployer = NoamServer::AssetDeployer.new(CONFIG[:rsa_private_key],
                                         CONFIG[:assets_location])

EM::run do
  begin
    server.start
    webserver.start
  rescue Exception => e
    NoamServer::NoamLogging.fatal("NoamServer", "Exiting due to bad startup.")
    exit
  end
  NoamApp.asset_deployer = deployer
  NoamApp.broadcast_port = CONFIG[:broadcast_port]
  NoamApp.run!

  if defined?($noam_server_started_action)
    EM::defer do
      $noam_server_started_action.call
    end
  end

  ["INT", "TERM", "QUIT"].each do |signal|
    trap(signal) do
      NoamServer::NoamLogging.info("NoamServer", "Closing Noam Server.")
      NoamServer::NoamLogging.shutdown
      EM.stop
    end
  end

  EventMachine.add_periodic_timer(2) do
    broadcaster.go
  end
end

