#!/usr/bin/env ruby

$: << File.expand_path(File.join(File.dirname(__FILE__), '..', "lib"))
$: << File.expand_path(File.join(File.dirname(__FILE__), '..', "web"))
require "rubygems"
require 'eventmachine'
require 'sinatra/async'
require 'timeout'

require 'noam_server/config'

require 'noam_web'
require 'noam_server/udp_broadcaster'
require 'noam_server/noam_server'
require 'noam_server/web_socket_server'
require 'noam_server/asset_deployer'

server = NoamServer::NoamServer.new(CONFIG[:listen_port])
webserver = NoamServer::WebSocketServer.new(CONFIG[:web_socket_port])
broadcaster = NoamServer::UdpBroadcaster.new(CONFIG[:broadcast_port],
                                             CONFIG[:listen_port])
deployer = NoamServer::AssetDeployer.new(CONFIG[:rsa_private_key],
                                         CONFIG[:assets_location])

NoamServer::Orchestra.instance.on_play do |name, value, player|
  persistor = CONFIG[:persistor_class].new

  EM::defer {
    # p 'name: ' + name
    # p 'value: ' + value.to_s
    # p 'id: ' + player.spalla_id unless player.nil?
    begin
      Timeout::timeout(15) {
        persistor.save(name, value, player.spalla_id) unless player.nil? #This ignores saving of messages from noam server
                                                                          #Should create player for web view
      }
    rescue => error
      p error
      p 'Unstored Data Entry: [' + name.to_s + ', ' + value.to_s + ', timestamp:' + Time.now.to_i.to_s + ']'
    end
  }
end

EM::run do
  server.start
  webserver.start
  NoamApp.asset_deployer = deployer
  NoamApp.broadcast_port = CONFIG[:broadcast_port]
  NoamApp.run!

  EventMachine.add_periodic_timer(2) do
    broadcaster.go
  end
end

